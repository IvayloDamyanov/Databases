1. Write a SQL query to find the names and salaries of the employees that take the minimal salary in the company.
Use a nested SELECT statement.

SELECT e.FirstName, e.LastName, e.Salary
FROM Employees e
WHERE e.Salary = (
SELECT MIN(em.Salary) FROM Employees em)


2. Write a SQL query to find the names and salaries of the employees that have a salary that is up to 10% higher than the minimal salary for the company.

SELECT e.FirstName, e.LastName, e.Salary
FROM Employees e
WHERE e.Salary < (
SELECT MIN(em.Salary) * 1.1 FROM Employees em)


3. Write a SQL query to find the full name, salary and department of the employees that take the minimal salary in their department.
Use a nested SELECT statement.

SELECT e.FirstName + ' ' + e.LastName as [Full name], e.Salary, d.Name as [Department]
FROM Employees e 
INNER JOIN Departments d
ON e.DepartmentID = d.DepartmentID
WHERE e.Salary = (
	SELECT MIN(Salary)
	FROM Employees
	WHERE DepartmentID = d.DepartmentID)


4. Write a SQL query to find the average salary in the department #1.

SELECT AVG(e.Salary) as [Salary]
FROM Employees e
WHERE e.DepartmentID = 1


5. Write a SQL query to find the average salary in the "Sales" department.

SELECT AVG(e.Salary) as [Salary]
FROM Employees e
INNER JOIN Departments d
ON e.DepartmentID = d.DepartmentID
WHERE d.Name = 'Sales'


6. Write a SQL query to find the number of employees in the "Sales" department.

SELECT COUNT(*) as [Count]
FROM Employees e
INNER JOIN Departments d
ON e.DepartmentID = d.DepartmentID
WHERE d.Name = 'Sales'


7. Write a SQL query to find the number of all employees that have manager.

SELECT COUNT(*) as [Count]
FROM Employees e
WHERE e.ManagerID IS NOT NULL


8. Write a SQL query to find the number of all employees that have no manager.

SELECT COUNT(*) as [Count]
FROM Employees e
WHERE e.ManagerID IS NULL


9. Write a SQL query to find all departments and the average salary for each of them.

SELECT AVG(e.Salary), d.Name
FROM Employees e, Departments d
WHERE e.DepartmentID = d.DepartmentID
GROUP BY d.Name


10. Write a SQL query to find the count of all employees in each department and for each town.

SELECT COUNT(*), d.Name, t.Name
FROM Employees e, Departments d, Towns t, Addresses a
WHERE e.DepartmentID = d.DepartmentID AND e.AddressID = a.AddressID AND a.TownID = t.TownID
GROUP BY d.Name, t.Name


11. Write a SQL query to find all managers that have exactly 5 employees. Display their first name and last name.

SELECT e.FirstName, e.LastName
FROM Employees e
WHERE e.EmployeeID IN (
	SELECT em.ManagerID
	FROM Employees em
	GROUP BY em.ManagerID
	HAVING COUNT(*) = 5)


12. Write a SQL query to find all employees along with their managers. For employees that do not have manager display the value "(no manager)".

SELECT empl.FirstName, empl.LastName, ISNULL(manag.FirstName + ' ' + manag.LastName, 'no manager') AS Manager
FROM Employees empl LEFT OUTER JOIN Employees manag
ON empl.ManagerID = manag.EmployeeID


13. Write a SQL query to find the names of all employees whose last name is exactly 5 characters long. Use the built-in LEN(str) function.

SELECT empl.FirstName, empl.LastName
FROM Employees empl
WHERE LEN(empl.LastName) = 5


14. Write a SQL query to display the current date and time in the following format "day.month.year hour:minutes:seconds:milliseconds".

SELECT CONVERT(VARCHAR(10),GETDATE(),104) + RIGHT(CONVERT(VARCHAR(24),GETDATE(),109), 12) AS [Current Date]


15. Write a SQL statement to create a table Users. Users should have username, password, full name and last login time.
    Choose appropriate data types for the table fields. Define a primary key column with a primary key constraint.
    Define the primary key column as identity to facilitate inserting records.
    Define unique constraint to avoid repeating usernames.
    Define a check constraint to ensure the password is at least 5 characters long.

CREATE TABLE Users (
	Id int IDENTITY,
	UserName nvarchar(50) UNIQUE,
	Password nvarchar(50),
	FullName nvarchar(255),
	LastLogIn datetime,
	CHECK(LEN(Password) >= 5),
	CONSTRAINT PK_Users PRIMARY KEY(Id)
)


16. Write a SQL statement to create a view that displays the users from the Users table that have been in the system today.
    Test if the view works correctly.

CREATE VIEW [LoggedInToday] AS
SELECT u.* FROM Users u
WHERE u.LastLogIn = LEFT(GETDATE(), 11)

SELECT * FROM LoggedInToday 

17. Write a SQL statement to create a table Groups. Groups should have unique name (use unique constraint).
    Define primary key and identity column.

CREATE TABLE Groups (
Id int IDENTITY PRIMARY KEY,
Name nvarchar(50) UNIQUE	
)


18.1 Write a SQL statement to add a column GroupID to the table Users.
    
ALTER TABLE Users
ADD GroupID INT


18.2 Fill some data in this new column and as well in the `Groups table.

UPDATE Users
SET GroupID = 1
WHERE UserName LIKE '%'


18.3 Write a SQL statement to add a foreign key constraint between tables Users and Groups tables.

ALTER TABLE Users
ADD CONSTRAINT FK_Users_Groups
	FOREIGN KEY (GroupID)
	REFERENCES Groups(Id)


19. Write SQL statements to insert several records in the Users and Groups tables.

INSERT INTO Users (UserName, FullName, LastLogIn)
VALUES ('Pesho', 'Pesho Peshev', LEFT(GETDATE(), 11), 
		('Gosho', 'Gosho Goshev', LEFT(GETDATE(), 11),
		('Mancho', 'Mancho Manchev', '2015-02-20')

INSERT INTO Groups (Name)
VALUES ('Restricted'), ('Admin'), ('Guest')


20. Write SQL statements to update some of the records in the Users and Groups tables.

UPDATE Groups
SET Name = 'AdminUsers'
WHERE Name = 'Admin'

UPDATE Users
SET GroupID = 2
WHERE UserName = 'Mancho'


21. Write SQL statements to delete some of the records from the Users and Groups tables.

DELETE FROM Users
WHERE UserName = 'Gosho'

DELETE FROM Groups
WHERE Id = 3


22. Write SQL statements to insert in the Users table the names of all employees from the Employees table.
    Combine the first and last names as a full name.
    For username use the first letter of the first name + the last name (in lowercase).
    Use the same for the password, and NULL for last login time.

INSERT INTO Users (UserName, FullName, Password, LastLogIn, GroupID)
SELECT LEFT(e.FirstName, 3) + LOWER(e.LastName), 
		e.FirstName + ' ' + e.LastName, 
		LEFT(e.FirstName, 3) + LOWER(e.LastName),
		NULL,
		1
FROM Employees e


23. Write a SQL statement that changes the password to NULL for all users that have not been in the system since 10.03.2010.

UPDATE Users
SET [Password] = NULL
WHERE LEFT(LastLogIn, 11) < '2010-03-10'


24. Write a SQL statement that deletes all users without passwords (NULL password).

DELETE FROM Users
WHERE [Password] IS NULL


25. Write a SQL query to display the average employee salary by department and job title.

SELECT e.DepartmentID, e.JobTitle, AVG(e.Salary) FROM Employees e
GROUP BY e.JobTitle, e.DepartmentID


26. Write a SQL query to display the minimal employee salary by department and job title 
    along with the name of some of the employees that take it.

SELECT e.DepartmentID, 
		e.JobTitle, 
		MIN(e.Salary) AS [Salary],
		[Employee] = (
			SELECT TOP(1) em.FirstName + ' ' + em.LastName
			FROM Employees em
			WHERE em.Salary = MIN(e.Salary) 
			AND em.JobTitle = e.JobTitle
		)
FROM Employees e
GROUP BY e.JobTitle, e.DepartmentID


27. Write a SQL query to display the town where maximal number of employees work.

SELECT TOP(1) t.Name, COUNT(*)
FROM Employees e
JOIN Addresses a
ON e.AddressID = a.AddressID
JOIN Towns t
ON a.TownID = t.TownID
GROUP BY t.Name
ORDER BY COUNT(*) DESC


28. Write a SQL query to display the number of managers from each town.

SELECT t.Name, COUNT(DISTINCT e.ManagerID)
FROM Employees e
JOIN Employees em
ON e.ManagerID = em.EmployeeID
JOIN Addresses a
ON em.AddressID = a.AddressID
JOIN Towns t
ON a.TownID = t.TownID
GROUP BY t.Name
ORDER BY COUNT(*) DESC


29. Write a SQL to create table WorkHours to store work reports for each employee (employee id, date, task, hours, comments).
    Don't forget to define identity, primary key and appropriate foreign key.
    Issue few SQL statements to insert, update and delete of some data in the table.
    Define a table WorkHoursLogs to track all changes in the WorkHours table with triggers.
    For each change keep the old record data, the new record data and the command (insert / update / delete).

BEGIN TRAN

CREATE TABLE WorkHours 
(
    [ID] int IDENTITY,
    [EmployeeID] int NOT NULL,
    [Date] datetime,
    [Task] nvarchar(100),
    [Hours] int,
    [Comments] nvarchar(500),
    CONSTRAINT PK_WorkHours PRIMARY KEY(ID),
    CONSTRAINT FK_WorkHours_Employees FOREIGN KEY(EmployeeID)
    REFERENCES Employees(EmployeeID)
)
GO

INSERT INTO WorkHours([EmployeeID], [Date], [Task], [Hours], [Comments])
VALUES
    (2, GETDATE(),'Scrum Meeting', 2, 'Kick-off Aviatto Project'),
    (3, GETDATE(),'Scrum Meeting', 1, 'Kick-off Aviatto Project'),
    (4, GETDATE(),'PTO', 8, 'Holiday'),
    (5, GETDATE(),'Task11', 4, 'Working on feature 11');

UPDATE WorkHours SET [Hours] = 2 WHERE [EmployeeID] = 3

DELETE FROM WorkHours WHERE Task='PTO'

CREATE TABLE WorkHoursLogs 
(
    [ID] int IDENTITY,
    [WorkHoursID] int,
    [EmployeeID] int NOT NULL,
    [Date] datetime,
    [Task] nvarchar(100),
    [Hours] int,
    [Comments] nvarchar(500),
    [Command] nvarchar(30) NOT NULL,
    CONSTRAINT PK_WorkHoursLogs PRIMARY KEY(ID),
    CONSTRAINT FK_WorkHoursLogs_Employees FOREIGN KEY(EmployeeID)
    REFERENCES Employees(EmployeeID)
)
GO

CREATE TRIGGER TR_WorhoursInsert ON WorkHours FOR INSERT
AS
INSERT INTO WorkHoursLogs(WorkHoursID, EmployeeID, [Date], Task, [Hours], Comments, Command)
SELECT  ID, EmployeeID, [Date], Task, [Hours], Comments, 'INSERT'
FROM inserted
GO

CREATE TRIGGER TR_WorhoursUpdate ON WorkHours FOR UPDATE
AS
INSERT INTO WorkHoursLogs(WorkHoursID, EmployeeID, [Date], Task, [Hours], Comments, Command)
SELECT ID, EmployeeID, [Date], Task, [Hours], Comments, 'UPDATE'
FROM inserted
GO

CREATE TRIGGER TR_WorhoursDelete ON WorkHours FOR DELETE
AS
INSERT INTO WorkHoursLogs(WorkHoursID, EmployeeID, [Date], Task, [Hours], Comments, Command)
SELECT ID, EmployeeID, [Date], Task, [Hours], Comments, 'DELETE'
FROM deleted
GO

INSERT INTO WorkHours([EmployeeID], [Date], [Task], [Hours], [Comments])
VALUES
(10, GETDATE(),'Insert Trigger 1', 2, 'Testing insert trigger'),
(11, GETDATE(),'Insert Trigger 2', 4, 'Testing insert trigger again')

UPDATE WorkHours
SET Task = 'Update Trigger 1'
WHERE EmployeeID = 11

DELETE FROM WorkHours
WHERE EmployeeID = 11

SELECT * FROM WorkHoursLogs

ROLLBACK TRAN